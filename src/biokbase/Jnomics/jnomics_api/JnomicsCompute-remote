#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from jnomics_thrift_api import JnomicsCompute
from jnomics_thrift_api.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  JnomicsThriftJobID alignBowtie(string inPath, string organism, string outPath, string opts, Authentication auth)'
  print '  JnomicsThriftJobID alignBWA(string inPath, string organism, string outPath, string alignOpts, string sampeOpts, Authentication auth)'
  print '  JnomicsThriftJobID fastqtoPe(string file1, string file2, string outpath, string workingdir, Authentication auth)'
  print '  JnomicsThriftJobID alignTophat(string ref_genome, string inPath, string gtffile, string outPath, string alignOpts, string workingdir, Authentication auth)'
  print '  JnomicsThriftJobID callCufflinks(string inPath, string outpath, string ref_gtf, string alignOpts, string workingdir, Authentication auth)'
  print '  JnomicsThriftJobID callCuffmerge(string inPath, string ref_genome, string outpath, string alignOpts, string gtffile, string workingdir, Authentication auth)'
  print '  JnomicsThriftJobID callCuffdiff(string inPath, string outpath, string ref_genome, string alignOpts, string condn_labels, string merged_gtf, string withReplicates, string workingdir, Authentication auth)'
  print '  JnomicsThriftJobID callCuffcompare(string inPath, string outpath, string alignOpts, string gtffile, string workingdir, Authentication auth)'
  print '  JnomicsThriftJobID ShockRead(string nodeId, string inPath, Authentication auth)'
  print '  JnomicsThriftJobID ShockWrite(string filename, string hdfsPath, Authentication auth)'
  print '  JnomicsThriftJobID workspaceUpload(string filename, string genome_id, string desc, string title, string srcDate, string onto_term_id, string onto_term_def, string onto_term_name, string seq_type, string shock_id, string src_id, string working_dir, Authentication auth)'
  print '  JnomicsThriftJobID ShockBatchWrite( inPath, string outPath, Authentication auth)'
  print '  JnomicsThriftJobID snpSamtools(string inPath, string organism, string outPath, Authentication auth)'
  print '  JnomicsThriftJobStatus getJobStatus(JnomicsThriftJobID jobID, Authentication auth)'
  print '  string getGridJobStatus(JnomicsThriftJobID jobID, Authentication auth)'
  print '   getAllJobs(Authentication auth)'
  print '  bool mergeVCF(string inDir, string inAlignments, string outVCF, Authentication auth)'
  print '  bool mergeCovariate(string inDir, string outCov, Authentication auth)'
  print '  JnomicsThriftJobID gatkRealign(string inPath, string organism, string outPath, Authentication auth)'
  print '  JnomicsThriftJobID gatkCallVariants(string inPath, string organism, string outPath, Authentication auth)'
  print '  JnomicsThriftJobID gatkCountCovariates(string inPath, string organism, string vcfMask, string outPath, Authentication auth)'
  print '  JnomicsThriftJobID gatkRecalibrate(string inPath, string organism, string recalFile, string outPath, Authentication auth)'
  print '  JnomicsThriftJobID runSNPPipeline(string inPath, string organism, string outPath, Authentication auth)'
  print '  JnomicsThriftJobID pairReads(string file1, string file2, string outFile, Authentication auth)'
  print '  JnomicsThriftJobID singleReads(string file, string outFile, Authentication auth)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = JnomicsCompute.Client(protocol)
transport.open()

if cmd == 'alignBowtie':
  if len(args) != 5:
    print 'alignBowtie requires 5 args'
    sys.exit(1)
  pp.pprint(client.alignBowtie(args[0],args[1],args[2],args[3],eval(args[4]),))

elif cmd == 'alignBWA':
  if len(args) != 6:
    print 'alignBWA requires 6 args'
    sys.exit(1)
  pp.pprint(client.alignBWA(args[0],args[1],args[2],args[3],args[4],eval(args[5]),))

elif cmd == 'fastqtoPe':
  if len(args) != 5:
    print 'fastqtoPe requires 5 args'
    sys.exit(1)
  pp.pprint(client.fastqtoPe(args[0],args[1],args[2],args[3],eval(args[4]),))

elif cmd == 'alignTophat':
  if len(args) != 7:
    print 'alignTophat requires 7 args'
    sys.exit(1)
  pp.pprint(client.alignTophat(args[0],args[1],args[2],args[3],args[4],args[5],eval(args[6]),))

elif cmd == 'callCufflinks':
  if len(args) != 6:
    print 'callCufflinks requires 6 args'
    sys.exit(1)
  pp.pprint(client.callCufflinks(args[0],args[1],args[2],args[3],args[4],eval(args[5]),))

elif cmd == 'callCuffmerge':
  if len(args) != 7:
    print 'callCuffmerge requires 7 args'
    sys.exit(1)
  pp.pprint(client.callCuffmerge(args[0],args[1],args[2],args[3],args[4],args[5],eval(args[6]),))

elif cmd == 'callCuffdiff':
  if len(args) != 9:
    print 'callCuffdiff requires 9 args'
    sys.exit(1)
  pp.pprint(client.callCuffdiff(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],eval(args[8]),))

elif cmd == 'callCuffcompare':
  if len(args) != 6:
    print 'callCuffcompare requires 6 args'
    sys.exit(1)
  pp.pprint(client.callCuffcompare(args[0],args[1],args[2],args[3],args[4],eval(args[5]),))

elif cmd == 'ShockRead':
  if len(args) != 3:
    print 'ShockRead requires 3 args'
    sys.exit(1)
  pp.pprint(client.ShockRead(args[0],args[1],eval(args[2]),))

elif cmd == 'ShockWrite':
  if len(args) != 3:
    print 'ShockWrite requires 3 args'
    sys.exit(1)
  pp.pprint(client.ShockWrite(args[0],args[1],eval(args[2]),))

elif cmd == 'workspaceUpload':
  if len(args) != 13:
    print 'workspaceUpload requires 13 args'
    sys.exit(1)
  pp.pprint(client.workspaceUpload(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],eval(args[12]),))

elif cmd == 'ShockBatchWrite':
  if len(args) != 3:
    print 'ShockBatchWrite requires 3 args'
    sys.exit(1)
  pp.pprint(client.ShockBatchWrite(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'snpSamtools':
  if len(args) != 4:
    print 'snpSamtools requires 4 args'
    sys.exit(1)
  pp.pprint(client.snpSamtools(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'getJobStatus':
  if len(args) != 2:
    print 'getJobStatus requires 2 args'
    sys.exit(1)
  pp.pprint(client.getJobStatus(eval(args[0]),eval(args[1]),))

elif cmd == 'getGridJobStatus':
  if len(args) != 2:
    print 'getGridJobStatus requires 2 args'
    sys.exit(1)
  pp.pprint(client.getGridJobStatus(eval(args[0]),eval(args[1]),))

elif cmd == 'getAllJobs':
  if len(args) != 1:
    print 'getAllJobs requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAllJobs(eval(args[0]),))

elif cmd == 'mergeVCF':
  if len(args) != 4:
    print 'mergeVCF requires 4 args'
    sys.exit(1)
  pp.pprint(client.mergeVCF(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'mergeCovariate':
  if len(args) != 3:
    print 'mergeCovariate requires 3 args'
    sys.exit(1)
  pp.pprint(client.mergeCovariate(args[0],args[1],eval(args[2]),))

elif cmd == 'gatkRealign':
  if len(args) != 4:
    print 'gatkRealign requires 4 args'
    sys.exit(1)
  pp.pprint(client.gatkRealign(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'gatkCallVariants':
  if len(args) != 4:
    print 'gatkCallVariants requires 4 args'
    sys.exit(1)
  pp.pprint(client.gatkCallVariants(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'gatkCountCovariates':
  if len(args) != 5:
    print 'gatkCountCovariates requires 5 args'
    sys.exit(1)
  pp.pprint(client.gatkCountCovariates(args[0],args[1],args[2],args[3],eval(args[4]),))

elif cmd == 'gatkRecalibrate':
  if len(args) != 5:
    print 'gatkRecalibrate requires 5 args'
    sys.exit(1)
  pp.pprint(client.gatkRecalibrate(args[0],args[1],args[2],args[3],eval(args[4]),))

elif cmd == 'runSNPPipeline':
  if len(args) != 4:
    print 'runSNPPipeline requires 4 args'
    sys.exit(1)
  pp.pprint(client.runSNPPipeline(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'pairReads':
  if len(args) != 4:
    print 'pairReads requires 4 args'
    sys.exit(1)
  pp.pprint(client.pairReads(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'singleReads':
  if len(args) != 3:
    print 'singleReads requires 3 args'
    sys.exit(1)
  pp.pprint(client.singleReads(args[0],args[1],eval(args[2]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
